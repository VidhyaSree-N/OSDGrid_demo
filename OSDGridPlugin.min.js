class OSDGridPlugin {
    constructor(viewer) {
        this.viewer = viewer;
        this.canvas = document.createElement("canvas");
        this.ctx = this.canvas.getContext('2d');
        this.viewer.canvasOverlay = this.canvas;
        this.toggleGrid = this.toggleGrid.bind(this);
        this.rotateGrid = this.rotateGrid.bind(this);
        this.changeGridSize = this.changeGridSize.bind(this);
        this.addPluginHTML(viewer);
        this.addPluginCSS(viewer);
        this.addGrid(viewer);
        this.gridVisible = false;
        this.rotationAngle = 0;
    }

    toggleGrid() {
        let gridVisible = this.gridVisible;
        this.gridVisible = ! this.gridVisible;
        if (!this.gridVisible) {
            // If grid is turned off, remove the overlay containing the grid canvas
            this.viewer.removeOverlay(this.canvas);
        }
        else {
            this.drawGridLines();
        }
        var gridRotationAngle = document.getElementById("grid-rotation-slider");
        var gridToggleSwitch = document.getElementById("grid");
        var angleDisplay = document.getElementById("angle-display");
        var gridRotationLabel = document.getElementById("grid-rotation-label");
        var gridSizeLabel = document.getElementById("grid-size-label");
        var gridSizeChange = document.getElementById("grid-size-slider");
        var gridSizeDisplay = document.getElementById("grid-size-value");
        if (gridVisible) {
            gridRotationAngle.style.display = "none";
            angleDisplay.style.display = "none";
            gridRotationLabel.style.display = "none";
            gridSizeLabel.style.display = "none";
            gridSizeChange.style.display = "none";
            gridSizeDisplay.style.display = "none";
            gridToggleSwitch.checked = false;
        } else {
            gridSizeLabel.style.display = "block";
            gridSizeChange.style.display = "block";
            gridRotationAngle.style.display = "block";
            angleDisplay.style.display = "block";
            gridRotationLabel.style.display = "block";
            gridSizeDisplay.style.display = "block";
            gridToggleSwitch.checked = true;
            gridRotationLabel.innerText = "Grid Rotation:";
            gridSizeLabel.innerText = "Grid Size:";
        }
    }

    changeGridSize() {
        this.drawGridLines();
    }

    rotateGrid() {
        this.rotationAngle = parseFloat(document.getElementById("grid-rotation-slider").value);
        const angleDisplay = document.getElementById("angle-display");
        angleDisplay.innerText = this.rotationAngle;
        this.drawGridLines(); // Redraw grid with the new angle
    }

    drawGridLines() {
        const viewer = this.viewer;
        const canvas = this.canvas;
        const ctx = this.ctx;
        const gridSizeSlider = document.getElementById("grid-size-slider");
        const gridSizeValue = document.getElementById("grid-size-value");
        const gridSize = parseInt(gridSizeSlider.value);
        gridSizeValue.innerText = gridSize;

        const world = viewer.world;
        if (this.gridVisible) {
            if (world) {
                const imageSize = world.getItemAt(0).getContentSize();
                const canvasWidth = imageSize.x;
                const canvasHeight = imageSize.y;
                const viewportWidth = viewer.viewport.getContainerSize().x;
                const viewportHeight = viewer.viewport.getContainerSize().y;

                const zoom = viewer.viewport.getZoom();

                // Calculate rotated dimensions of the image
                const rotatedWidth = Math.abs(canvasWidth * Math.cos(this.rotationAngle * Math.PI / 180)) + Math.abs(canvasHeight * Math.sin(this.rotationAngle * Math.PI / 180));
                const rotatedHeight = Math.abs(canvasHeight * Math.cos(this.rotationAngle * Math.PI / 180)) + Math.abs(canvasWidth * Math.sin(this.rotationAngle * Math.PI / 180));

                canvas.width = viewportWidth * zoom;
                canvas.height = viewportHeight * zoom * 2.4;

                // Adjust grid size based on zoom level
                const scaledGridSize = gridSize * zoom;

                ctx.strokeStyle = "red";
                ctx.save(); // Save the current transformation matrix

                // Translate to the center of the canvas
                ctx.translate(canvas.width / 2, canvas.height / 2);
                // Rotate the canvas
                ctx.rotate(this.rotationAngle * Math.PI / 180);
                // Translate back to the original position
                ctx.translate(-rotatedWidth / 2, -rotatedHeight / 2);

                // Draw horizontal grid lines
                for (let y = 0; y <= rotatedHeight; y += scaledGridSize) {
                    ctx.beginPath();
                    ctx.moveTo(0, y);
                    ctx.lineTo(rotatedWidth, y);
                    ctx.stroke();
                }

                // Draw vertical grid lines
                for (let x = 0; x <= rotatedWidth; x += scaledGridSize) {
                    ctx.beginPath();
                    ctx.moveTo(x, 0);
                    ctx.lineTo(x, rotatedHeight);
                    ctx.stroke();
                }

                ctx.restore(); // Restore the saved transformation matrix
            }

            viewer.addOverlay({
                element: canvas,
                location: OpenSeadragon.OverlayPlacement.CENTER,
                checkResize: true
            });
        }
    }

    addGrid() {
        // Function to initialize the Grid
        const init = () => {
            this.viewer.addHandler("open", () => {
                this.drawGridLines();
            });
            this.viewer.addHandler('zoom', () => {
                this.drawGridLines();
            });
        };
        // Call the initialize function when the plugin is created
        init();
    }

    addPluginCSS(viewer) {
        const pluginCSS = `
         body {
          overflow: hidden;
        }

        .switch {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 24px;
        }

        .switch input {
        opacity: 0;
        width: 0;
        height: 0;
        }

        .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
        }

        .slider:before {
        position: absolute;
        content: "";
        height: 18px;
        width: 18px;
        left: 3px;
        bottom: 3px;
        background-color: white;
        -webkit-transition: .4s;
        transition: .4s;
        }

        input:checked + .slider {
        background-color: #2196F3;
        }

        input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
        }

        input:checked + .slider:before {
        -webkit-transform: translateX(26px);
        -ms-transform: translateX(26px);
        transform: translateX(26px);
        }

        /* Rounded sliders */
        .slider.round {
        border-radius: 34px;
        }

        .slider.round:before {
        border-radius: 50%;
        }

        #grid-rotation {
        display: none;
        }

        #grid-rotation.visible {
        display: inline-block;
        }

        #grid-rotation-container {
          display: none;
          margin-left: 10px;
        }

        #grid-rotation-slider.visible {
          display: inline-block;
        }

        #grid-rotation-label {
          display: inline-block;
          width: 30px;
          text-align: center;
          margin-left: 5px;
        }

        #grid-rotation-slider.visible + #grid-rotation-label {
          display: inline-block;
        }

        #grid-rotation-slider {
          display: none;
        }

        #info {
        position: absolute;
        z-index: 1000;
        bottom: 0;
        left: 0;
        padding: 10px;
        background-color: rgba(0, 0, 0, 0.7);
        min-height: 5vh;
        width: 8vw;
        color: white;
        font-family: sans-serif;
        font-size: 0.9em;
        }
        /* Grid */
        .switch {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 24px;
        }

        .switch input {
        opacity: 0;
        width: 0;
        height: 0;
        }

        .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
        }

        .slider:before {
        position: absolute;
        content: "";
        height: 18px;
        width: 18px;
        left: 3px;
        bottom: 3px;
        background-color: white;
        -webkit-transition: .4s;
        transition: .4s;
        }

        input:checked + .slider {
        background-color: #2196F3;
        }

        input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
        }

        input:checked + .slider:before {
        -webkit-transform: translateX(26px);
        -ms-transform: translateX(26px);
        transform: translateX(26px);
        }

        .slider-container {
        display: flex;
        align-items: center;
        }

        .slider-input {
        width: 100px;
        margin-right: 10px;
        }

        .slider-value {
        margin: 0;
        }
        /* Rounded sliders */
        .slider.round {
        border-radius: 34px;
        }

        .slider.round:before {
        border-radius: 50%;
        }

        #grid-rotation {
        display: none;
        }

        #grid-rotation.visible {
        display: inline-block;
        }

        #grid-rotation-container {
          display: none;
          margin-left: 10px;
        }

        #grid-rotation-slider.visible {
          display: inline-block;
        }

        #grid-rotation-label {
          display: inline-block;
          text-align: left;
          margin-left: 5px;
        }

        #grid-rotation-slider.visible + #grid-rotation-label {
          display: inline-block;
        }

        #grid-rotation-slider {
          display: none;
        }

        #grid-size {
        display: none;
        }

        #grid-size.visible {
        display: inline-block;
        }

        #grid-size-container {
          display: none;
          margin-left: 10px;
        }

        #grid-size-slider.visible {
          display: inline-block;
        }

        #grid-size-label {
         display: inline-block;
          text-align: left;
          margin-left: 5px;
        }

        #grid-size-slider.visible + #grid-size-label {
          display: inline-block;
        }

        #grid-size-slider {
          display: none;
        }

#grid-rotation2 {
        display: none;
        }

        #grid-rotation2.visible {
        display: inline-block;
        }

        #grid-rotation-container {
          display: none;
          margin-left: 10px;
        }

        #grid-rotation-slider2.visible {
          display: inline-block;
        }

        #grid-rotation-label2 {
          display: inline-block;
          text-align: left;
          margin-left: 5px;
        }

        #grid-rotation-slider2.visible + #grid-rotation-label2 {
          display: inline-block;
        }

        #grid-rotation-slider2 {
          display: none;
        }

        #grid-size2 {
        display: none;
        }

        #grid-size2.visible {
        display: inline-block;
        }

        #grid-size-container {
          display: none;
          margin-left: 10px;
        }

        #grid-size-slider2.visible {
          display: inline-block;
        }

        #grid-size-label2 {
         display: inline-block;
          text-align: left;
          margin-left: 5px;
        }

        #grid-size-slider2.visible + #grid-size-label2 {
          display: inline-block;
        }

        #grid-size-slider2 {
          display: none;
        }

        #info {
        position: absolute;
        z-index: 1000;
        bottom: 0;
        left: 0;
        padding: 10px;
        background-color: rgba(0, 0, 0, 0.7);
        min-height: 5vh;
        width: 10vw;
        color: white;
        font-family: sans-serif;
        font-size: 0.9em;
        }
        `;
        const styleElement = document.createElement("style");
        styleElement.type = "text/css";
        styleElement.appendChild(document.createTextNode(pluginCSS));
        document.head.appendChild(styleElement);
    }
    // Function to add the plugin HTML to the viewer element
    addPluginHTML(viewer) {
        // Create the plugin HTML
        const pluginHTML = `
    <div id="info">
        <span>Grid</span>
        <label class="switch" for="grid">
            <input type="checkbox" id="grid">
            <span class="slider round"></span>
        </label>
        <p id="grid-rotation-label"></p>
        <div class="slider-container">
            <input type="range" min="-180" max="180" value="0" id="grid-rotation-slider" class="slider-input">
            <p id="angle-display" class="slider-value"></p>
        </div>
        <p id="grid-size-label"></p>
        <div class="slider-container">
            <input type="range" min="30" max="200" value="50" id="grid-size-slider" class="slider-input">
            <p id="grid-size-value" class="slider-value" style="display:none"></p>
        </div>
    </div>
  `;
        // Append the plugin HTML to the viewer element
        const viewerElement = document.getElementById(viewer.element.id);
        viewerElement.insertAdjacentHTML("beforeend", pluginHTML);
        // Attach event listeners using addEventListener
        document.getElementById("grid-rotation-slider").addEventListener("input", this.rotateGrid);
        document.getElementById("grid").addEventListener("change", this.toggleGrid);
        document.getElementById("grid-size-slider").addEventListener("input", this.changeGridSize);
    }
}
